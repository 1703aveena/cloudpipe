#!/usr/bin/env bash
#
# Generate a set of TLS credentials that can be used to run development mode.

set -o errexit

ROOT=$(cd $(dirname $0)/..; pwd)

KEYMASTER="docker run --volume ${ROOT}/certificates:/certificates --rm cloudpipe/keymaster"

# Randomly create a password file, if you haven't supplied one already.
# For development mode, we'll just use the same (random) password for everything.
if [ ! -f "${ROOT}/certificates/password" ]; then
  echo ">> creating a random password in ${ROOT}/certificates/password."
  touch ${ROOT}/certificates/password
  chmod 640 ${ROOT}/certificates/password
  # "If the same pathname argument is supplied to -passin and -passout arguments then the first
  # line will be used for the input password and the next line for the output password."
  cat /dev/urandom | head -c 128 | base64 > ${ROOT}/certificates/password
  echo "<< random password created"
fi

# Get uid
CONTAINERUID=$(${KEYMASTER} id -u)

if [[ $CONTAINERUID -ne $UID ]]; then
    echo We need to set the uid of certificates/ from `stat -c %u certificates/` to $CONTAINERUID.
    echo We will try doing that via sudo. Good luck!
    sudo chown -vR $CONTAINERUID certificates/
fi


# Certificate authority.
${KEYMASTER} ca

# Keypair for the API and job runner.
${KEYMASTER} signed-keypair -n cloudpipe -h cloudpipe -p client

# Keypair for the authentication server.
${KEYMASTER} signed-keypair -n auth-store -h authstore -p server

# Self-signed, independent keypair to be used by externally accessible endpoints.
${KEYMASTER} selfsigned-keypair -n external
